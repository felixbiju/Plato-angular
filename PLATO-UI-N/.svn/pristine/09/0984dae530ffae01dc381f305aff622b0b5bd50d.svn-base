<div id="reportConfig01" class="w3-modal modal-lg">
  <div class="w3-modal-content w3-animate-zoom">
    <header class="w3-container">
      <a onclick="document.getElementById('reportConfig01').style.display='none'" class="modal-close">
        <svg viewBox="0 0 24 24">
          <path d="M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z" />
          <path d="M0 0h24v24h-24z" fill="none" />
        </svg>
      </a>
      <h2>Add Check Points in Live Build Console</h2>
    </header>
    <div class="w3-container modal-content customScroll">
      <div class="form-group search_bar">
        <input class="form-control form-control-sm search_input" type="text" placeholder="Search modules by name..."
          [(ngModel)]="filterText">
      </div>
      <mat-grid-list cols="4">
        <mat-grid-tile *ngFor="let checkPointModule of (savedcheckpoints |arrangeBy: 'order_number') | filterCheckPoint: filterText;">
          <mat-card id="reportConfigCard">
            <mat-card-title>
              <span>
                <mat-checkbox class="selectAllCheckbox pull-left" (change)="allSelect(isAllChecked, checkPointModule.module_name)"
                  [(ngModel)]="isAllChecked[checkPointModule.module_name]">
                </mat-checkbox>
              </span>
              <span style="padding-left: 15px;"> {{checkPointModule.module_name}} </span>
            </mat-card-title>
            <mat-card-content id="{{checkPointModule.module_name}}_checkPoints">
              <mat-list class="list-group list-group-flush" role="list">
                <mat-list-item class="list-group-item" role="listitem" *ngFor="let checkPoint of checkPointModule.checkpoint_criteria|arrangeBy: 'order_number';
                              let j=index">
                  <span>
                    <mat-checkbox class="pull-left" value="{{checkPoint.checkpoint_name}}" name="{{checkPoint.checkpoint_name}}"
                    align="end" [(ngModel)]="checkPoint.checked">
                    </mat-checkbox>
                  </span>
                  <span class="pull-left" matTooltip="Pass Criteria : {{checkPoint.pass_criteria}} & fail Criteria :
                                 {{checkPoint.fail_criteria}}"
                    matTooltipPosition="after" style="font-size:14px">
                    &nbsp; &nbsp; {{checkPoint.checkpoint_name}}
                  </span>
                </mat-list-item>
              </mat-list>
            </mat-card-content>
          </mat-card>
        </mat-grid-tile>
      </mat-grid-list>
    </div>
    <footer class="w3-container">
      <button mat-raised-button class="btn" color="primary" (click)="addCheckPoints()">
        Save
      </button>
    </footer>
  </div>
</div>
<div id="confirmDelete01" class="w3-modal modal-sm action-popup">
  <div class="w3-modal-content w3-animate-zoom">
    <header class="w3-container">
      <a onclick="document.getElementById('confirmDelete01').style.display='none'" class="modal-close">
        <svg viewBox="0 0 24 24">
          <path d="M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z" />
          <path d="M0 0h24v24h-24z" fill="none" />
        </svg>
      </a>
      <h2>Confirmation Required</h2>
    </header>
    <div class="w3-container modal-content customScroll text-center">
      <p style="margin: 20px auto;"> Are you sure that you want to delete this tool configuration?</p>
    </div>
    <footer class="w3-container">
      <button class="btn mat-raised-button mat-primary mat-raised-cancel-button" color="primary" mat-raised-button onclick="document.getElementById('confirmDelete01').style.display='none'">
        Cancel
      </button>
      <button class="btn mat-raised-button mat-primary" color="primary" mat-raised-button (click)="deleteToolCard()">
        Ok
      </button>
    </footer>
  </div>
</div>
<div id="confirmBox02" class="w3-modal modal-sm action-popup">
  <div class="w3-modal-content w3-animate-zoom">
    <header class="w3-container">
      <a onclick="document.getElementById('confirmBox02').style.display='none'" class="modal-close">
        <svg viewBox="0 0 24 24">
          <path d="M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z" />
          <path d="M0 0h24v24h-24z" fill="none" />
        </svg>
      </a>
      <h2>Confirmation Required</h2>
    </header>
    <div class="w3-container modal-content customScroll text-center">
      <p style="margin: 20px auto;"> Do you want to save your changes ? </p>
    </div>
    <footer class="w3-container">
      <button class="btn mat-raised-button mat-primary" color="primary" mat-raised-button onclick="document.getElementById('confirmBox02').style.display='none'"
        style="float:right;" (click)="cancelAllChanges()">
        Discard Changes
      </button>
      <button class="btn mat-raised-button mat-primary" color="primary" mat-raised-button (click)="createSubJobs(selectedTools); updateAllSubjobs(); deleteSubJobs(); cancelAllChanges()"
        onclick="document.getElementById('confirmBox02').style.display='none'" style="float:right;">
        Save Changes
      </button>
    </footer>
  </div>
</div>
<mat-expansion-panel [disabled]="true" class="page-title-heading">
  <mat-expansion-panel-header style="cursor: default; height: 50px !important;">
    <mat-card-title class="pageHeading">Build Configuration</mat-card-title>
    <div class="button-container">
      <ng-container *ngFor="let component of screenPermission">
        <ng-container *ngIf="component.name === 'Create Jobs'">
          <button type="button" class="mat-icon-button-sm" class="toolbox-button md-btn md-btn-raised" style="margin-left: 1rem;" (click)="createSubJobs(selectedTools); updateAllSubjobs(); deleteSubJobs();"
          [ngStyle]="{'opacity':component.checked ? '0.5' : '1' }" [disabled]="component.checked">
            Save Job
          </button>
        </ng-container>
        <ng-container *ngIf="component.name === 'Tool Box'">
          <button type="button" (click)="sidenav.toggle()" class="toolbox-button  md-btn md-btn-raised" [ngStyle]="{'opacity':component.checked ? '0.5' : '1' }"
            [disabled]="component.checked">
            Toolbox
          </button>
        </ng-container>
        <ng-container *ngIf="component.name === 'Cancel All Change'">
          <button mat-icon-button class="mat-icon-button-sm" style="float:right;" [disableRipple]="true" (click)="cancelAllChanges()"
          [ngStyle]="{'opacity':component.checked ? '0.5' : '1' }" [disabled]="component.checked">
            <img title="Cancel All Changes" src="../../assets/genral_icons/delete.png" />
          </button>
        </ng-container>
      </ng-container>
    </div>

  </mat-expansion-panel-header>
</mat-expansion-panel>
<div id="fullPage" class="customScroll" style="padding-top: 50px; padding-bottom: 120px;">
  <mat-sidenav-container class="sidenav-container">
    <mat-sidenav #sidenav class="sidenav" mode="side" opened="false" position="end">
      <mat-accordion id="toolBox">
        <mat-expansion-panel hideToggle="true" id="myToolExpantion" *ngFor="let category of availableTools |reverseSort: 'order'">
          <mat-expansion-panel-header id="myToolExpantionHeader">
            <mat-panel-title> {{category.categoryName |uppercase}} </mat-panel-title>
          </mat-expansion-panel-header>
          <mat-action-row *ngFor="let tools of (category.toolToSet |colFormat); let l=last" id="myBtnRow">
            <ul *ngFor="let tool of tools" id="myBtnRow">
              <button mat-button id="myToolBtn" pDraggable="tools" (onDragStart)="dragStart($event, tool)" (onDragEnd)="dragEnd($event)"
                matTooltip="{{tool.tool_name}}" matTooltipPosition="below">
                <img *ngIf="!l" class="img-fluid d-inline-block" id="tool_icon" alt="{{tool.tool_name | lowercase}}" src="../../../assets/Tools_Icons/new/{{tool.tool_name |lowercase}}.png">
                <img *ngIf="l" class="img-fluid d-inline-block" id="tool_icon" alt="{{tool.tool_name | lowercase}}" style="margin-right:-17px;"
                  src="../../../assets/Tools_Icons/new/{{tool.tool_name |lowercase}}.png">
              </button>
            </ul>
          </mat-action-row>
        </mat-expansion-panel>
      </mat-accordion>
    </mat-sidenav>
    <mat-sidenav-content class="sidenav-content customScroll" pDroppable="tools" (onDrop)="drop($event)" [ngClass]="{'ui-state-highlight': draggedTool}">

      <ng-container *ngFor="let component of screenPermission">
        <!-- <ng-container *ngIf="component.name === 'Create Jobs'">
          <button mat-icon-button class="mat-icon-button-sm" style="position: fixed; top: 85px; right: 7px;" [disableRipple]="true" (click)="createSubJobs(selectedTools); updateAllSubjobs(); deleteSubJobs();"
          [ngStyle]="{'opacity':component.checked ? '0.5' : '1' }" [disabled]="component.checked">
            <img title="Save Job" src="../../assets/genral_icons/checkmark.png" />
          </button>
        </ng-container> -->
        <!-- <ng-container *ngIf="component.name === 'Tool Box'">
          <button type="button" (click)="sidenav.toggle()" id="right_menu" style="top: 120px;" [ngStyle]="{'opacity':component.checked ? '0.5' : '1' }"
            [disabled]="component.checked">
            <img src="..\..\assets\genral_icons\toolbox.png">
          </button>
        </ng-container> -->
      </ng-container>
      <div [sortablejs]="selectedTools" class="div-tool">
        <mat-card style="border: 1px solid #ffcdb4;background-color: #eeeeee;" *ngFor="let tool of selectedTools" class="invoke-card"
          [id]="tool.tool_name">
          <mat-card-title class="settings_bar">
            Invoke {{ tool.tool_name }}
            <span> {{tool.subjob_name}} </span>
            <ng-container *ngFor="let component of screenPermission">
              <ng-container *ngIf="component.name === 'Delete Job'">
                <button mat-icon-button [disableRipple]="true" matTooltip="Delete" matTooltipPosition="below" class="mat-icon-button-sm"
                  style="float:right;" onclick="document.getElementById('confirmDelete01').style.display='block'" (click)="saveToolLocal(tool)"
                  *ngIf="(tool.tool_name |lowercase) !== 'build'" [ngStyle]="{'opacity':component.checked ? '0.5' : '1' }"
                  [disabled]="component.checked">
                  <img title="Close" src="../../assets/genral_icons/delete.png" />
                </button>
              </ng-container>
            </ng-container>
            <ng-container *ngFor="let component of screenPermission">
              <ng-container *ngIf="component.name === 'Report Configuration'">
                <button mat-icon-button (click)="getToolCheckPoints(tool)" [disableRipple]="true"
                  matTooltip="Report Configuration" matTooltipPosition="below" class="mat-icon-button-sm" style="float:right;"
                  [ngStyle]="{'opacity':component.checked ? '0.5' : '1' }" [disabled]="component.checked">
                  <img title="Report Configuration" src="../../assets/genral_icons/chart_pie.png" />
                </button>
              </ng-container>
            </ng-container>
            <ng-container *ngFor="let component of screenPermission">
              <ng-container *ngIf="component.name === 'Minimize Job Card'">
                <button mat-icon-button [disableRipple]="true" *ngIf="(tool.tool_name |lowercase) !== 'build'" class="mat-icon-button-sm"
                  style="float:right;" (click)="toggleSize(tool.subjob_name)" [ngStyle]="{'opacity':component.checked ? '0.5' : '1' }"
                  [disabled]="component.checked">
                  <img title="Close" src="../../assets/genral_icons/minus_sm.png" />
                </button>
              </ng-container>
            </ng-container>
            <ng-container *ngFor="let component of screenPermission">
              <ng-container *ngIf="component.name === 'Minimize Job Card'">
                <button mat-icon-button [disableRipple]="true" *ngIf="(tool.tool_name |lowercase) === 'build'" class="mat-icon-button-sm"
                  style="float:right;" (click)="toggleBuildCard(tool.tool_name)" [ngStyle]="{'opacity':component.checked ? '0.5' : '1' }"
                  [disabled]="component.checked">
                  <img title="Close" src="../../assets/genral_icons/minus_sm.png" />
                </button>
              </ng-container>
            </ng-container>
          </mat-card-title>
          <div [id]="tool.subjob_name" class="row" style="display:block;margin: 10px 10px 0px 10px !important">
            <mat-card-content *ngIf="(tool.tool_name | lowercase) !== 'svn' && (tool.tool_name | lowercase) !== 'maven' && (tool.tool_name | lowercase) !== 'vsts' && (tool.tool_name | lowercase) !== 'sonar' && (tool.tool_name | lowercase) !== 'build'">
              <mat-input-container class="input-full-width col-md-12 col-sm-12">
                <input (click)="enter($event,tool.subjob_name)" (mouseleave)="leave($event, tool.subjob_name)" matInput placeholder="Name"
                  [(ngModel)]="tool.subjob_name" required id="myjobname" name="myjobname" #myjobname="ngModel">
                <mat-hint align="end">
                  <strong>Name must be unique</strong>
                </mat-hint>
                <div *ngIf="myjobname.errors && (myjobname.dirty || myjobname.touched)" class="alert alert-danger">
                  <div [hidden]="!myjobname.errors.required">
                    Job Name is required!
                  </div>
                </div>
              </mat-input-container>
              <p *ngIf="(showsubjob)">{{showsubjob}} job already exist give another name</p>

              <!-- source code management -->
              <!-- source code management -->
              <button class="accordion" id="{{tool.subModuleId + 'Accordian'}}" (click)="accordianToggle(tool.subModuleId)">
                Source Code Management
                <span style="float:right;">
                  <img src="../../assets/genral_icons/minus_sm.png" title="toggle" style="height: 16px; width: 16px;">
                </span>
              </button>
              <div class="panel" id="{{tool.subModuleId + 'Panel'}}">
                <div class="container-fluid">
                  <div class="row">
                    <div class="col-md-6" style="padding:0 !important">
                      <mat-input-container class="input-full-width" style="width:98%;float:left;">
                        <mat-select [(value)]='tool.repo_manager' placeholder="Select Source Code Manager">
                          <mat-option *ngFor="let manager of ['svn', 'git']; let i=index" [value]="manager">
                            {{ manager |uppercase }}
                          </mat-option>
                        </mat-select>
                      </mat-input-container>
                    </div>
                    <div class="col-md-6" style="padding:0 !important">
                      <mat-input-container class="input-full-width" style="width:98%;float:right;">
                        <mat-select [(value)]='tool.repo_credentials' placeholder="Select Access key">
                          <mat-option *ngFor="let credential of credential_list" [value]="credential.id">
                            {{ credential.displayName |uppercase }}
                          </mat-option>
                        </mat-select>
                      </mat-input-container>
                    </div>
                    <div class="col-md-12" style="padding:0 !important">
                      <mat-input-container class="input-full-width">
                        <input matInput placeholder="Repository Path" [(ngModel)]="tool.repo_path">
                      </mat-input-container>
                    </div>
                    <div *ngIf="tool.repo_manager === 'git'" class="col-md-6" style="padding:0 !important">
                      <mat-input-container class="input-full-width">
                        <input matInput placeholder="Branch Name" [(ngModel)]="tool.branch_name">
                      </mat-input-container>
                    </div>
                    <div *ngIf="tool.repo_manager === 'git'" class="col-md-6" style="padding:0 !important">
                      <mat-input-container class="input-full-width">
                        <mat-select [(value)]='tool.git_browser_type' placeholder="GIT browser type">
                          <mat-option *ngFor="let gitType of gitBrowserTypes" [value]="gitType">
                            {{ gitType |uppercase }}
                          </mat-option>
                        </mat-select>
                      </mat-input-container>
                    </div>
                    <div *ngIf="(tool.repo_manager === 'git' && tool.git_browser_type  === 'GitLab')" class="col-md-6" style="padding:0 !important">
                      <mat-input-container class="input-full-width">
                        <input matInput placeholder="Browser URL" [(ngModel)]="tool.browser_url">
                      </mat-input-container>
                    </div>
                    <div *ngIf="((tool.repo_manager === 'git') && (tool.git_browser_type === 'GitLab'))" class="col-md-6" style="padding:0 !important">
                      <mat-input-container class="input-full-width">
                        <input matInput placeholder="Browser Version" [(ngModel)]="tool.browser_version">
                      </mat-input-container>
                    </div>
                  </div>
                </div>
              </div>
              <mat-input-container class="input-full-width col-md-12 col-sm-12">
                <textarea matInput placeholder="Command to Execute" matTextareaAutosize matAutosizeMinRows="1" matAutosizeMaxRows="10" [(ngModel)]="tool.command_to_execute"
                  required id="command" name="command" #command="ngModel"></textarea>
                <div *ngIf="command.errors && (command.dirty || command.touched)" class="alert alert-danger">
                  <div [hidden]="!command.errors.required">
                    Command to execute is required!
                  </div>
                </div>
              </mat-input-container>
              <mat-input-container class="input-full-width col-md-6 col-sm-6" style="width:50%;">
                <mat-select [(value)]='tool.node_name' placeholder="Node Name" required>
                  <mat-option *ngFor="let node of node_list; let i=index" [value]="node.node_name" (click)="selectedNodeValue(node.node_name)">
                    {{ node.node_name }}
                  </mat-option>
                </mat-select>
              </mat-input-container>
              <div class="col-md-6 col-sm-6">
                <!-- <mat-checkbox class="ladyBugCheck" [(ngModel)]="tool.isladyBugChecked">
                  Ladybug Notification
                </mat-checkbox>
                <mat-checkbox class="ladyBugCheck" [(ngModel)]="tool.isAlmChecked">
                  ALM Synchronization
                </mat-checkbox> -->
              </div>
              <!-- <div class="col-md-6 col-sm-6">
                <mat-checkbox class="ladyBugCheck" [(ngModel)]="tool.isPollSCMChecked">
                  Poll SCM
                </mat-checkbox>
                <mat-checkbox class="ladyBugCheck" [(ngModel)]="tool.isPeriodicBuildChecked">
                  Build periodically
                </mat-checkbox>
              </div>
              <mat-input-container *ngIf="tool.isPollSCMChecked" class="input-half-width col-md-6 col-sm-6">
                <input matInput placeholder="Poll SCM Schedule" [(ngModel)]="tool.SCMSchedule">
              </mat-input-container>
              <mat-input-container *ngIf="tool.isPeriodicBuildChecked" class="input-half-width col-md-6 col-sm-6">
                <input matInput placeholder="Build periodically Schedule" [(ngModel)]="tool.BuildPeriodicSchedule">
              </mat-input-container> -->
              <mat-input-container class="input-full-width col-md-12 col-sm-12">
                <input matInput placeholder="Report Path" [(ngModel)]="tool.report_path" required id="reportpath" name="reportpath" #reportpath="ngModel">
                <div *ngIf="reportpath.errors && (reportpath.dirty || reportpath.touched)" class="alert alert-danger">
                  <div [hidden]="!reportpath.errors.required">
                    Report Path is required!
                  </div>
                </div>
              </mat-input-container>
              <mat-input-container class="input-full-width col-md-2 col-sm-2" (click)="getAvailableJobs(tool)" style="width:16%;">
                <mat-select placeholder="Select Post Build Jobs" [(value)]="tool.postBuildTo" multiple>
                  <mat-option (click)="resetPostBuild(tool)">None</mat-option>
                  <mat-option *ngFor="let subjob of allAvailableJobs" [value]="subjob.subjob_name">
                    {{subjob.subjob_name}}
                  </mat-option>
                </mat-select>
              </mat-input-container>
              <div class=" col-md-10 col-sm-10">
                <mat-input-container class="input-full-width">
                  <input matInput placeholder="Post Build Job List" [(ngModel)]="tool.postBuildTo" disabled="true">
                </mat-input-container>
              </div>
              <!-- post build options -->
              <div id="postBuild-opt" *ngIf="tool.postBuildTo?.length > 0">
                <mat-radio-group class="postBuild-radio-group" [(ngModel)]="tool.postBuild_trigger_option">
                  <mat-radio-button class="postBuild-radio-button" *ngFor="let option of postBuildOpts" [value]="option">
                    {{option |titlecase}}
                  </mat-radio-button>
                </mat-radio-group>
              </div>
            </mat-card-content>
            <!-- Build Config -->
            <div [id]="(tool.tool_name | lowercase)" style="display:block;margin: 10px 10px 0px 10px !important">
              <mat-card-content *ngIf="(tool.tool_name | lowercase) === 'build'">
                <mat-input-container class="input-full-width">
                  <input matInput placeholder="Name" [(ngModel)]="module_name" [disabled]="true">
                  <mat-hint align="end">
                    <strong>Name must be unique</strong>
                  </mat-hint>
                </mat-input-container>
                <mat-input-container class="input-full-width">
                  <textarea matInput placeholder="Description" matTextareaAutosize matAutosizeMinRows="1" matAutosizeMaxRows="10" [(ngModel)]="module_description"
                    [disabled]="true">
                     </textarea>
                </mat-input-container>
                <!-- <div class="form-group text-left">
                  <label for="TestRight"> Code Engineering:--</label>
                  <a target="_blank" href="">
                    Engine
                  </a>
                  <a target="_blank" href="http://172.25.14.111:testright">
                    Analysis
                  </a>
                </div> -->
                <div class="form-group text-left">
                  <label for="jenkinsConfig"> Build Configuration Link:--</label>
                  <a target="_blank" href="{{jenkinsConfig}}">
                    configuration
                  </a>
                </div>
                <div class="form-group text-left">
                  <label for="unitTesting"> Unit Testing:</label>
                  <mat-radio-group class="example-radio-group" [(ngModel)]="unitTesting">
                    <mat-radio-button class="example-radio-button" value="junit"> JUnit </mat-radio-button>
                    <mat-radio-button class="example-radio-button" value="testng"> TestNG </mat-radio-button>
                    <mat-radio-button class="example-radio-button" value="none"> None </mat-radio-button>
                  </mat-radio-group>
                </div>
                <div class="form-group text-left">
                  <mat-checkbox [(ngModel)]="isSonarChecked">
                    SONAR
                  </mat-checkbox>
                  <ng-container *ngIf="isSonarChecked === true">
                    <mat-input-container class="input-full-width">
                      <input matInput placeholder="SONAR Key" type="text" [(ngModel)]="sonarKey" required id="mysonarkey" name="mysonarkey" #mysonarkey="ngModel">
                      <mat-hint align="end">
                        <strong>Enter SONAR key</strong>
                      </mat-hint>
                      <div *ngIf="mysonarkey.errors && (mysonarkey.dirty || mysonarkey.touched)" class="alert alert-danger">
                        <div [hidden]="!mysonarkey.errors.required">
                          SONAR Key is required!
                        </div>
                      </div>
                    </mat-input-container>
                    <mat-input-container class="input-full-width">
                      <input matInput placeholder="SONAR Url" type="text" [(ngModel)]="sonarUrl" required id="mysonarurl" name="mysonarurl" #mysonarurl="ngModel">
                      <mat-hint align="end">
                        <strong>Enter SONAR URL</strong>
                      </mat-hint>
                      <div *ngIf="mysonarurl.errors && (mysonarurl.dirty || mysonarurl.touched)" class="alert alert-danger">
                        <div [hidden]="!mysonarurl.errors.required">
                          SONAR URL is required!
                        </div>
                      </div>
                    </mat-input-container>
                  </ng-container>
                </div>
                <div class="form-group text-left">
                  <mat-checkbox [(ngModel)]="isDuckcreekChecked">
                    Duckcreek Manuscript Analyzer
                  </mat-checkbox>
                  <ng-container *ngIf="isDuckcreekChecked === true">
                    <mat-input-container class="input-full-width">
                      <input matInput placeholder="Duckcreek Url" type="text" [(ngModel)]="duckcreekUrl" required id="myduckcreekurl" name="myduckcreekurl"
                        #myduckcreekurl="ngModel">
                      <mat-hint align="end">
                        <strong>Enter Duckcreek URL</strong>
                      </mat-hint>
                      <div *ngIf="myduckcreekurl.errors && (myduckcreekurl.dirty || myduckcreekurl.touched)" class="alert alert-danger">
                        <div [hidden]="!myduckcreekurl.errors.required">
                          Duckcreek URL is required!
                        </div>
                      </div>
                    </mat-input-container>
                    <mat-input-container class="input-full-width">
                      <input matInput placeholder="Report Path" type="text" [(ngModel)]="Reportpath" required id="myreportpath" name="myreportpath"
                        #myreportpath="ngModel">
                      <div *ngIf="myreportpath.errors && (myreportpath.dirty || myreportpath.touched)" class="alert alert-danger">
                        <div [hidden]="!myreportpath.errors.required">
                          Report Path is required!
                        </div>
                      </div>
                    </mat-input-container>
                    <mat-input-container class="input-full-width">
                      <input matInput placeholder="Input Parameters" type="text" [(ngModel)]="inputParameter" required id="myinputparameter" name="myinputparameter"
                        #myinputparameter="ngModel">
                      <div *ngIf="myinputparameter.errors && (myinputparameter.dirty || myinputparameter.touched)" class="alert alert-danger">
                        <div [hidden]="!myinputparameter.errors.required">
                          Input Parameter is required!
                        </div>
                      </div>
                    </mat-input-container>
                  </ng-container>
                </div>
                <!-- testright -->
                <div class="form-group text-left">
                    <mat-checkbox [(ngModel)]="isTestRightChecked">
                      TestRight
                    </mat-checkbox>
                    <ng-container *ngIf="isTestRightChecked === true">
                      <mat-input-container class="input-full-width">
                        <input matInput placeholder="TestRight Url" [(ngModel)]="testRightUrl" required id="testrighturl" name="testrighturl" #testrighturl="ngModel">
                        <mat-hint align="end">
                          <strong>Enter TestRight URL</strong>
                        </mat-hint>
                      </mat-input-container>
                    </ng-container>
                </div>
              </mat-card-content>
            </div>
            <!-- svn tool card -->
            <mat-card-content *ngIf="(tool.tool_name | lowercase) === 'svn'|| (tool.tool_name | lowercase) === 'maven' || (tool.tool_name | lowercase) === 'vsts'">
              <mat-input-container class="input-full-width">
                <input matInput placeholder="Name" #message maxlength="50" type="text" [(ngModel)]="tool.subjob_name">
                <mat-hint align="end">
                  <strong>Name must be unique</strong>
                </mat-hint>
              </mat-input-container>
              <div class="input-full-width">
                <label> Repository : &nbsp; </label>
                <mat-radio-group>
                  <mat-radio-button value="svn" (click)="advanceConfig('svn')">SVN Repository</mat-radio-button>
                  <mat-radio-button value="git" (click)="advanceConfig('git')">Git Repository</mat-radio-button>
                </mat-radio-group>
              </div>
              <mat-card *ngIf="showSvn" id="advanceCard">
                <mat-card-content>
                  <mat-input-container class="input-full-width">
                    <input matInput placeholder="URL" [(ngModel)]='tool.svnUrl' [value]="tool.svnUrl">
                  </mat-input-container>
                  <mat-input-container class="input-full-width">
                    <mat-select placeholder="Credentials">
                      <mat-option *ngFor="let Credential of credential_list; let i=index" [value]="Credential.displayName" (click)="selectedCredentialValue(Credential.id,Credential.displayName)">
                        {{ Credential.displayName }}
                      </mat-option>
                    </mat-select>
                  </mat-input-container>
                </mat-card-content>
              </mat-card>
              <mat-card *ngIf="showGit" id="advanceCard">
                <mat-card-content>
                  <h3> Git card </h3>
                </mat-card-content>
              </mat-card>
              <mat-input-container class="input-full-width">
                <textarea matInput placeholder="Configuration File Name" matTextareaAutosize matAutosizeMinRows="1" matAutosizeMaxRows="10"
                  [(ngModel)]="tool.command_to_execute"></textarea>
              </mat-input-container>
              <mat-input-container class="input-full-width">
                <!-- <input matInput placeholder="Node" [(ngModel)]="tool.node_name"> -->
                <mat-select [(value)]='tool.node_name' placeholder="Node Name">
                  <mat-option *ngFor="let node of node_list; let i=index" [value]=" node.node_name">
                    {{ node.node_name }}
                  </mat-option>
                </mat-select>
              </mat-input-container>
            </mat-card-content>
            <!-- jyoti -->
            <mat-card-content *ngIf="(tool.tool_name | lowercase) === 'sonar'">
              <mat-input-container class="input-full-width">
                <input matInput placeholder="Name" #message maxlength="50" type="text" [(ngModel)]="tool.subjob_name">
                <mat-hint align="end">
                  <strong>Name must be unique</strong>
                </mat-hint>
              </mat-input-container>
              <div class="input-full-width">
                <span> Repository : &nbsp; </span>
                <mat-radio-group>
                  <mat-radio-button value="svn" (click)="advanceConfig('svn')">SVN</mat-radio-button>
                  <mat-radio-button value="git" (click)="advanceConfig('git')">Git</mat-radio-button>
                </mat-radio-group>
              </div>
              <mat-card *ngIf="showSvn" id="advanceCard">
                <mat-card-content>
                  <mat-input-container class="input-full-width">
                    <input matInput placeholder="URL" [(ngModel)]='tool.svnUrl' [value]="tool.svnUrl">
                  </mat-input-container>
                  <mat-input-container class="input-full-width">
                    <mat-select placeholder="Credentials">
                      <mat-option *ngFor="let Credential of credential_list; let i=index" [value]="Credential.displayName" (click)="selectedCredentialValue(Credential.id,Credential.displayName)">
                        {{ Credential.displayName }}
                      </mat-option>
                    </mat-select>
                  </mat-input-container>
                </mat-card-content>
              </mat-card>
              <mat-card *ngIf="showGit" id="advanceCard">
                <mat-card-content>
                  <h3> Git card </h3>
                </mat-card-content>
              </mat-card>
              <mat-input-container class="input-full-width">
                <textarea matInput placeholder="Commands to execute" matTextareaAutosize matAutosizeMinRows="1" matAutosizeMaxRows="10" [(ngModel)]="tool.command_to_execute"></textarea>
              </mat-input-container>
              <mat-input-container class="input-full-width">
                <mat-select [(value)]='tool.node_name' placeholder="Node Name">
                  <mat-option *ngFor="let node of node_list; let i=index" [value]=" node.node_name">
                    {{ node.node_name }}
                  </mat-option>
                </mat-select>
              </mat-input-container>
              <mat-input-container class="input-full-width">
                <input matInput placeholder="Report Path" [(ngModel)]="tool.report_path">
              </mat-input-container>
            </mat-card-content>
          </div>
          <!-- jyoti -->
        </mat-card>
      </div>
      <ng-container *ngIf="savedToolConfig?.length < 1">
        <div class="col-md-10 dashed-border no-saved-tool">
          Drag n drop tool from toolbox
        </div>
      </ng-container>
      <div [sortablejs]="savedToolConfig" class="div-tool">
        <mat-card *ngFor="let tool of (savedToolConfig |arrangeBy: 'order_number')" class="invoke-card"
          [id]="tool.tool_name">
          <mat-card-title class="settings_bar">
            <span style="min-width: 170px !important; display: inline-block; font-weight: 600;">{{tool.subjob_name}}</span>
            <span> Invoke {{ tool.tool_name }}</span>
            <ng-container *ngFor="let component of screenPermission">
              <ng-container *ngIf="component.name === 'Delete Job'">
                <button mat-icon-button [disableRipple]="true" (click)="saveToolLocal(tool)" matTooltip="Delete" matTooltipPosition="below"
                  class="mat-icon-button-sm" style="float:right;" onclick="document.getElementById('confirmDelete01').style.display='block'"
                  *ngIf="(tool.tool_name |lowercase) !== 'build'" [ngStyle]="{'opacity':component.checked ? '0.5' : '1' }"
                  [disabled]="component.checked">
                  <img title="Close" src="../../assets/genral_icons/delete.png" />
                </button>
              </ng-container>
            </ng-container>
            <ng-container *ngFor="let component of screenPermission">
              <ng-container *ngIf="component.name === 'Report Configuration'">
                <button mat-icon-button [disableRipple]="true" (click)="getToolCheckPoints(tool)" class="mat-icon-button-sm" style="float:right;"
                  matTooltip="Report Configuration"
                  matTooltipPosition="below" [ngStyle]="{'opacity':component.checked ? '0.5' : '1' }" [disabled]="component.checked">
                  <img title="Report Configuration" src="../../assets/genral_icons/chart_pie.png" />
                </button>
              </ng-container>
            </ng-container>
            <ng-container *ngFor="let component of screenPermission">
              <ng-container *ngIf="component.name === 'Minimize Job Card'">
                <button mat-icon-button [disableRipple]="true" class="mat-icon-button-sm" style="float:right;" (click)="toggleSize(tool.subjob_name)"
                  [ngStyle]="{'opacity':component.checked ? '0.5' : '1' }" [disabled]="component.checked">
                  <img title="Close" src="../../assets/genral_icons/minus_sm.png" />
                </button>
              </ng-container>
            </ng-container>
          </mat-card-title>
          <div style="display:block;margin: 10px 10px 0px 10px !important" class="row" id="{{tool.subjob_name}}">
            <mat-card-content *ngIf="(tool.tool_name | lowercase) !== 'svn'
               && (tool.tool_name | lowercase) !== 'maven' && (tool.tool_name |lowercase) !== 'vsts'
               && (tool.tool_name | lowercase) !== 'sonar' && (tool.tool_name |lowercase) !== 'build'">
              <mat-input-container class="input-full-width col-md-12 col-sm-12">
                <input matInput placeholder="Name" type="text" [(ngModel)]="tool.subjob_name" disabled="true">
              </mat-input-container>

              <!-- source code management -->
              <button class="accordion" id="{{tool.subModuleId + 'Accordian'}}"
              (click)="accordianToggle(tool.subModuleId)">
                Source Code Management
                <span style="float:right;">
                  <img src="../../assets/genral_icons/minus_sm.png" title="toggle" style="height: 16px; width: 16px;">
                </span>
              </button>
              <div class="panel" id="{{tool.subModuleId + 'Panel'}}">
                <div class="container-fluid">
                  <div class="row">
                    <div class="col-md-6" style="padding:0 !important">
                      <mat-input-container class="input-full-width" style="width:98%;float:left;">
                        <mat-select [(value)]='tool.repo_manager' placeholder="Select Source Code Manager">
                          <mat-option *ngFor="let manager of ['svn', 'git']; let i=index" [value]="manager">
                            {{ manager |uppercase }}
                          </mat-option>
                        </mat-select>
                      </mat-input-container>
                    </div>
                    <div class="col-md-6" style="padding:0 !important">
                      <mat-input-container class="input-full-width" style="width:98%;float:right;">
                        <mat-select [(value)]='tool.repo_credentials' placeholder="Select Access key">
                          <mat-option *ngFor="let credential of credential_list" [value]="credential.id">
                            {{ credential.displayName |uppercase }}
                          </mat-option>
                        </mat-select>
                      </mat-input-container>
                    </div>
                    <div class="col-md-12" style="padding:0 !important">
                      <mat-input-container class="input-full-width">
                        <input matInput placeholder="Repository Path" [(ngModel)]="tool.repo_path">
                      </mat-input-container>
                    </div>
                    <div *ngIf="tool.repo_manager === 'git'" class="col-md-6" style="padding:0 !important">
                      <mat-input-container class="input-full-width">
                        <input matInput placeholder="Branch Name" [(ngModel)]="tool.branch_name">
                      </mat-input-container>
                    </div>
                    <div *ngIf="tool.repo_manager === 'git'" class="col-md-6" style="padding:0 !important">
                      <mat-input-container class="input-full-width">
                        <mat-select [(value)]='tool.git_browser_type' placeholder="GIT browser type">
                          <mat-option *ngFor="let gitType of gitBrowserTypes" [value]="gitType">
                            {{ gitType |uppercase }}
                          </mat-option>
                        </mat-select>
                      </mat-input-container>
                    </div>
                    <div *ngIf="(tool.repo_manager === 'git' && tool.git_browser_type  === 'GitLab')" class="col-md-6" style="padding:0 !important">
                      <mat-input-container class="input-full-width">
                        <input matInput placeholder="Browser URL" [(ngModel)]="tool.browser_url">
                      </mat-input-container>
                    </div>
                    <div *ngIf="((tool.repo_manager === 'git') && (tool.git_browser_type === 'GitLab'))" class="col-md-6" style="padding:0 !important">
                      <mat-input-container class="input-full-width">
                        <input matInput placeholder="Browser Version" [(ngModel)]="tool.browser_version">
                      </mat-input-container>
                    </div>
                  </div>
                </div>
              </div>

              <mat-input-container class="input-full-width col-md-12 col-sm-12">
                <textarea matInput placeholder="Command to Execute" matTextareaAutosize matAutosizeMinRows="1" matAutosizeMaxRows="10" [(ngModel)]="tool.command_to_execute"></textarea>
              </mat-input-container>
              <mat-input-container class="input-full-width col-md-6 col-sm-6" style="width:50%;">
                <mat-select [(value)]='tool.node_name' placeholder="Node Name">
                  <mat-option *ngFor="let node of node_list; let i=index" [value]="node.node_name">
                    {{ node.node_name }}
                  </mat-option>
                </mat-select>
              </mat-input-container>
              <!-- <div class="col-md-6 col-sm-6">
                <mat-checkbox class="ladyBugCheck" [(ngModel)]="tool.isladyBugChecked">
                  Ladybug Notification
                </mat-checkbox>
                <mat-checkbox class="ladyBugCheck" [(ngModel)]="tool.isAlmChecked">
                  ALM Synchronization
                </mat-checkbox>
              </div> -->
              <!-- <div class="col-md-6 col-sm-6">
                <mat-checkbox class="ladyBugCheck" [(ngModel)]="tool.isPollSCMChecked">
                  Poll SCM
                </mat-checkbox>
                <mat-checkbox class="ladyBugCheck" [(ngModel)]="tool.isPeriodicBuildChecked">
                  Build periodically
                </mat-checkbox>
              </div>
              <mat-input-container *ngIf="tool.isPollSCMChecked" class="input-half-width col-md-6 col-sm-6">
                <input matInput placeholder="Poll SCM Schedule" [(ngModel)]="tool.SCMSchedule">
              </mat-input-container>
              <mat-input-container *ngIf="tool.isPeriodicBuildChecked" class="input-half-width col-md-6 col-sm-6">
                <input matInput placeholder="Build periodically Schedule" [(ngModel)]="tool.BuildPeriodicSchedule">
              </mat-input-container> -->
              <mat-input-container class="input-full-width col-md-12 col-sm-12">
                <input matInput placeholder="Report Path" [(ngModel)]="tool.report_path">
              </mat-input-container>
              <mat-input-container class="input-full-width col-md-2 col-sm-2" (click)="getAvailableJobs(tool)" style="width:16%;">
                <mat-select placeholder="Select Post Build Jobs" [(value)]="tool.postBuildTo" multiple>
                  <mat-option (click)="resetPostBuild(tool)">None</mat-option>
                  <mat-option *ngFor="let subjob of allAvailableJobs" [value]="subjob.subjob_name">
                    {{subjob.subjob_name}}
                  </mat-option>
                </mat-select>
              </mat-input-container>
              <div class=" col-md-10 col-sm-10">
                <mat-input-container class="input-full-width">
                  <input matInput placeholder="Post Build Job List" [(ngModel)]="tool.postBuildTo" disabled="true">
                </mat-input-container>
              </div>
              <!-- post build options -->
              <div id="postBuild-opt" *ngIf="tool.postBuildTo?.length > 0">
                <mat-radio-group class="postBuild-radio-group" [(ngModel)]="tool.postBuild_trigger_option">
                  <mat-radio-button class="postBuild-radio-button" *ngFor="let option of postBuildOpts" [value]="option">
                    {{option |titlecase}}
                  </mat-radio-button>
                </mat-radio-group>
              </div>
            </mat-card-content>
            <mat-card-content *ngIf="(tool.tool_name | lowercase) === 'build'">
              <mat-input-container class="input-full-width">
                <input matInput placeholder="Name" #message maxlength="50" type="text" [(ngModel)]="tool.subjob_name" disabled="true">
              </mat-input-container>
              <mat-input-container class="input-full-width">
                <input matInput placeholder="Description" #message maxlength="50" type="text" [(ngModel)]="tool.subjob_description" disabled="true">
              </mat-input-container>
              <!-- <div class="form-group text-left">
                <label for="TestRight"> Code Engineering:--</label>
                <a target="_blank" href="" style="margin: 0 3rem;">
                  Engine
                </a>
                <a target="_blank" href="http://172.25.14.111:8080/testright" style="margin: 0 3rem;">
                  Analysis
                </a>
              </div> -->
              <div class="form-group text-left">
                <label for="jenkinsConfig"> Build Configuration Link:</label>
                <a target="_blank" href="{{getURL(tool.command_to_execute, 3)}}">
                  configuration
                </a>
              </div>
              <div class="form-group text-left">
                <label for="unitTesting"> Unit Testing:</label>
                <mat-radio-group class="example-radio-group" [(ngModel)]="unitTesting">
                  <mat-radio-button class="example-radio-button" value="junit"> JUnit </mat-radio-button>
                  <mat-radio-button class="example-radio-button" value="testng"> TestNG </mat-radio-button>
                  <mat-radio-button class="example-radio-button" value="none"> None </mat-radio-button>
                </mat-radio-group>
              </div>
              <div class="form-group text-left">
                <mat-checkbox [(ngModel)]="isSonarChecked"> SONAR </mat-checkbox>
                <ng-container *ngIf="isSonarChecked === true">
                  <mat-input-container class="input-full-width">
                    <input matInput placeholder="SONAR Key" [(ngModel)]="sonarKey" value="{{getURL(tool.report_path, 5)}}">
                  </mat-input-container>
                  <mat-input-container class="input-full-width">
                    <input matInput placeholder="{{getURL(tool.report_path, 2)}}" [(ngModel)]="sonarUrl" value="{{getURL(tool.report_path, 3)}}">
                  </mat-input-container>
                </ng-container>
              </div>
              <!-- ------------------------shalini-------------------- -->
              <div class="form-group text-left">
                <mat-checkbox [(ngModel)]="isDuckcreekChecked"> Duckcreek Manuscript Analyzer </mat-checkbox>
                <ng-container *ngIf="isDuckcreekChecked === true">
                  <mat-input-container class="input-full-width">
                    <input matInput placeholder="{{getURL(tool.report_path, 8)}}" [(ngModel)]="duckcreekUrl" value="{{getURL(tool.report_path, 9)}}">
                  </mat-input-container>
                  <mat-input-container class="input-full-width">
                    <input matInput placeholder="{{getURL(tool.report_path, 10)}}" [(ngModel)]="Reportpath" value="{{getURL(tool.report_path, 11)}}">
                  </mat-input-container>
                  <mat-input-container class="input-full-width">
                    <input matInput placeholder="{{getURL(tool.report_path, 12)}}" [(ngModel)]="inputParameter" value="{{getURL(tool.report_path, 13)}}">
                  </mat-input-container>
                </ng-container>
              </div>
              <!-- testright -->
              <div class="form-group text-left">
                <mat-checkbox [(ngModel)]="isTestRightChecked"> TestRight </mat-checkbox>
                <ng-container *ngIf="isTestRightChecked === true">
                  <mat-input-container class="input-full-width">
                    <input matInput placeholder="Enter Url" [(ngModel)]="testRightUrl" value="testRightUrl">
                  </mat-input-container>
                </ng-container>
              </div>
            </mat-card-content>
            <mat-card-content *ngIf="(tool.tool_name | lowercase) === 'svn' || (tool.tool_name | lowercase) === 'maven' || (tool.tool_name | lowercase) === 'vsts'">
              <mat-input-container class="input-full-width">
                <input matInput placeholder="Name" #message maxlength="50" type="text" [(ngModel)]="tool.subjob_name" disabled="true">
                <mat-hint align="end">
                </mat-hint>
              </mat-input-container>
              <div class="input-full-width">
                <label> Repository : &nbsp; </label>
                <mat-radio-group [ngModel]="getURL(tool.report_path, 0)" disabled>
                  <mat-radio-button value="svn" (click)="advanceConfig('svn')">SVN Repository</mat-radio-button>
                  <mat-radio-button value="git" (click)="advanceConfig('git')">GIT Repository</mat-radio-button>
                </mat-radio-group>
              </div>
              <mat-card *ngIf="getURL(tool.report_path, 1) === 'svn'" id="advanceCard">
                <mat-card-content>
                  <mat-input-container class="input-full-width">
                    <input matInput placeholder="URL" [ngModel]="getURL(tool.report_path, 1)" value="">
                  </mat-input-container>
                </mat-card-content>
              </mat-card>
              <mat-card *ngIf="getURL(tool.report_path, 1) === 'git'" id="advanceCard">
                <mat-card-content>
                  <h3> Git card </h3>
                </mat-card-content>
              </mat-card>
              <mat-input-container class="input-full-width">
                <textarea matInput placeholder="Configuration File Name" matTextareaAutosize matAutosizeMinRows="1" matAutosizeMaxRows="10"
                  [(ngModel)]="tool.command_to_execute"></textarea>
              </mat-input-container>
              <mat-input-container class="input-full-width">
                <mat-select [(value)]='tool.node_name' placeholder="Node Name">
                  <mat-option *ngFor="let node of node_list; let i=index" [value]=" node.node_name">
                    {{ node.node_name }}
                  </mat-option>
                </mat-select>
              </mat-input-container>
            </mat-card-content>
            <!-- jyoti -->
            <mat-card-content *ngIf="(tool.tool_name | lowercase) === 'sonar'">
              <mat-input-container class="input-full-width">
                <input matInput placeholder="Name" #message maxlength="50" type="text" [(ngModel)]="tool.subjob_name" disabled="true">
                <mat-hint align="end">
                </mat-hint>
              </mat-input-container>
              <div class="input-full-width">
                <span> Repository : &nbsp; </span>
                <mat-radio-group>
                  <mat-radio-button value="svn" (click)="advanceConfig('svn')">SVN</mat-radio-button>
                  <mat-radio-button value="git" (click)="advanceConfig('git')">Git</mat-radio-button>
                </mat-radio-group>
              </div>
              <mat-card *ngIf="showSvn" id="advanceCard">
                <mat-card-content>
                  <mat-input-container class="input-full-width">
                    <input matInput placeholder="URL" value="">
                  </mat-input-container>
                </mat-card-content>
              </mat-card>
              <mat-card *ngIf="showGit" id="advanceCard">
                <mat-card-content>
                  <h3> Git card </h3>
                </mat-card-content>
              </mat-card>
              <mat-input-container class="input-full-width">
                <textarea matInput placeholder="Command to execute" matTextareaAutosize matAutosizeMinRows="1" matAutosizeMaxRows="10" [(ngModel)]="tool.command_to_execute"></textarea>
              </mat-input-container>
              <mat-input-container class="input-full-width">
                <mat-select [(value)]='tool.node_name' placeholder="Node Name">
                  <mat-option *ngFor="let node of node_list; let i=index" [value]=" node.node_name" (click)="selectedValue(node.node_name)">
                    {{ node.node_name }}
                  </mat-option>
                </mat-select>
              </mat-input-container>
            </mat-card-content>
          </div>
          <!-- jyoti -->
        </mat-card>
      </div>
    </mat-sidenav-content>
  </mat-sidenav-container>
</div>
