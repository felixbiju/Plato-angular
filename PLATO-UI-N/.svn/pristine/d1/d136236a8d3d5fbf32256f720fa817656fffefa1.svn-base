<!-- FOR APPLICATION CREATION POP_UP -->
<div id="createApplicationTask" class="w3-modal modal-sm action-popup">
  <div class="w3-modal-content w3-animate-zoom" id="modalContainer">
    <header class="w3-container">
      <a (click)="resetForm(myappform)"  onclick="document.getElementById('createApplicationTask').style.display='none'" class="modal-close">
        <svg viewBox="0 0 24 24">
          <path d="M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z"
          />
          <path d="M0 0h24v24h-24z" fill="none" />
        </svg>
      </a>
      <h2>Create Application</h2>
    </header>
    <form #myappform="ngForm">
      <div class="w3-container modal-content customScroll text-center">
        <mat-form-field class="example-full-width" style="margin-top:30px">
          <input matInput placeholder="Enter Application Name" [(ngModel)]="applicationName" required id="myappname" name="myappname" #myappname="ngModel">
          <div *ngIf="myappname.errors && (myappname.dirty || myappname.touched)" class="alert alert-danger">
            <div [hidden]="!myappname.errors.required">
              Application Name is required!
            </div>
          </div>
        </mat-form-field>
        <mat-form-field class="example-full-width" >
          <input matInput placeholder="Enter Application URL" [(ngModel)]="applicationURL" required id="myappurl" name="myappurl" #myappurl="ngModel">
          <div *ngIf="myappurl.errors && (myappurl.dirty || myappurl.touched)" class="alert alert-danger">
            <div [hidden]="!myappurl.errors.required">
              Application URL is required!
            </div>
          </div>
        </mat-form-field>
        <mat-form-field class="example-full-width" style="margin-bottom:30px">
          <input matInput type="number" min="1" max="5" placeholder="Enter Application Status Check Interval in min(s)" [(ngModel)]="applicationTime" required id="myapptime" name="myapptime" #myapptime="ngModel">
          <div *ngIf="myapptime.errors && (myapptime.dirty || myapptime.touched)" class="alert alert-danger">
            <div [hidden]="!myappurl.errors.required">
              Application Status Check Interval is Required!
            </div>
          </div>
        </mat-form-field>
      </div>
      <footer class="w3-container">
        <button mat-raised-button (click)="resetForm(myappform)" class="btn mat-raised-button mat-primary mat-raised-cancel-button" color="primary" onclick="document.getElementById('createApplicationTask').style.display='none'">
          Cancel
        </button>
        <button mat-raised-button  class="btn mat-raised-button mat-primary" [disabled]="myappform.invalid" color="primary" onclick="document.getElementById('createApplicationTask').style.display='none'" (click)="createApplication()">
          Create
        </button>
      </footer>
    </form>
  </div>
</div>


<!-- FOR APPLICATION UPDATION POP_UP -->
<div id="updateApplicationTask" class="w3-modal modal-sm action-popup">
    <div class="w3-modal-content w3-animate-zoom" id="modalContainer">
      <header class="w3-container">
        <a onclick="document.getElementById('updateApplicationTask').style.display='none'" class="modal-close">
          <svg viewBox="0 0 24 24">
            <path d="M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z"
            />
            <path d="M0 0h24v24h-24z" fill="none" />
          </svg>
        </a>
        <h2>Update Application</h2>
      </header>
      <div class="w3-container modal-content customScroll text-center">
          <mat-form-field class="example-full-width" style="margin-top:30px">
              <input matInput placeholder="Application Name" [(ngModel)]="applications.applicationName">
      </mat-form-field>
      <mat-form-field class="example-full-width">
          <input matInput placeholder="Application URL" [(ngModel)]="applications.applicationURL" >
      </mat-form-field>
      <mat-form-field class="example-full-width" style="margin-bottom:30px">
          <input matInput placeholder="Application Pooling Interval" [(ngModel)]="applications.pullingInterval" >
      </mat-form-field>
    </div>
    <footer class="w3-container">
        <button mat-raised-button  class="btn mat-raised-button mat-primary mat-raised-cancel-button" color="primary" onclick="document.getElementById('updateApplicationTask').style.display='none'">
          Cancel
        </button>
        <button mat-raised-button  class="btn mat-raised-button mat-primary" color="primary" onclick="document.getElementById('updateApplicationTask').style.display='none'"
        (click)="updateApplication()"> Update
        </button>
      </footer>
  </div>
</div>


<!-- FOR SERVER CREATION POP_UP -->
<div id="createServerTask" class="w3-modal modal-sm action-popup">
    <div class="w3-modal-content w3-animate-zoom" id="modalContainer">
      <header class="w3-container">
        <a (click)="resetForm(myserverform)"  onclick="document.getElementById('createServerTask').style.display='none'" class="modal-close">
          <svg viewBox="0 0 24 24">
            <path d="M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z"
            />
            <path d="M0 0h24v24h-24z" fill="none" />
          </svg>
        </a>
        <h2>Create Server</h2>
      </header>
      <form #myserverform="ngForm">
        <div class="w3-container modal-content customScroll text-center">
            <mat-form-field class="example-full-width" style="margin-top:30px">
                <input matInput placeholder="Enter Server Name" [(ngModel)]="serverName" required id="servername" name="servername" #servername="ngModel">
                <div *ngIf="servername.errors && (servername.dirty || servername.touched)" class="alert alert-danger">
                    <div [hidden]="!servername.errors.required">
                      Server Name is required!
                    </div>
                  </div>
            </mat-form-field>
            <mat-form-field class="example-full-width">
                <input matInput placeholder="Enter Server URL" [(ngModel)]="serverURL" required id="serverurl" name="serverurl" #serverurl="ngModel">
                <div *ngIf="serverurl.errors && (serverurl.dirty || serverurl.touched)" class="alert alert-danger">
                  <div [hidden]="!serverurl.errors.required">
                    Server URL is required!
                  </div>
                </div>
            </mat-form-field>
            <mat-form-field class="example-full-width" style="margin-bottom:30px">
                <input matInput placeholder="Enter Pooling Interval" [(ngModel)]="serverInterval" required id="servertime" name="servertime" #servertime="ngModel">
                <div *ngIf="servertime.errors && (servertime.dirty || servertime.touched)" class="alert alert-danger">
                  <div [hidden]="!servertime.errors.required">
                    Server Pooling Interval is required!
                  </div>
                </div>
            </mat-form-field>
        </div>
      <footer class="w3-container">
          <button mat-raised-button (click)="resetForm(myserverform)"  class="btn mat-raised-button mat-primary mat-raised-cancel-button" color="primary" onclick="document.getElementById('createServerTask').style.display='none'">
            Cancel
          </button>
          <button mat-raised-button  class="btn mat-raised-button mat-primary" [disabled]="myserverform.invalid" color="primary" onclick="document.getElementById('createServerTask').style.display='none'" (click)="createServer()">
            Create
          </button>
        </footer>
        </form>
  </div>
</div>


<!-- FOR SERVER UPDATION POP_UP -->
<div id="updateServerTask" class="w3-modal modal-sm action-popup">
    <div class="w3-modal-content w3-animate-zoom" id="modalContainer">
      <header class="w3-container">
        <a onclick="document.getElementById('updateServerTask').style.display='none'" class="modal-close">
          <svg viewBox="0 0 24 24">
            <path d="M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z"
            />
            <path d="M0 0h24v24h-24z" fill="none" />
          </svg>
        </a>
        <h2>Update Server</h2>
      </header>
      <div class="w3-container modal-content customScroll text-center">
          <mat-form-field class="example-full-width" style="margin-top:30px">
              <input matInput placeholder="Server Name" [(ngModel)]="servers.serverName">
      </mat-form-field>
      <mat-form-field class="example-full-width">
          <input matInput placeholder="Server URL" [(ngModel)]="servers.serverURL" >
      </mat-form-field>
      <mat-form-field class="example-full-width" style="margin-bottom:30px">
          <input matInput placeholder="Pooling Interval" [(ngModel)]="servers.pullingInterval" >
      </mat-form-field>
    </div>
    <footer class="w3-container">
        <button mat-raised-button  class="btn mat-raised-button mat-primary mat-raised-cancel-button" color="primary" onclick="document.getElementById('updateServerTask').style.display='none'">
          Cancel
        </button>
        <button mat-raised-button  class="btn mat-raised-button mat-primary" color="primary" onclick="document.getElementById('updateServerTask').style.display='none'" (click)="updateServer()">
          Update
        </button>
      </footer>
  </div>
</div>

<!-- FOR DATABASE CREATION POP_UP -->
<div id="createDatabaseTask" class="w3-modal modal-sm action-popup">
    <div class="w3-modal-content w3-animate-zoom" id="modalContainer">
      <header class="w3-container">
        <a onclick="document.getElementById('createDatabaseTask').style.display='none'" class="modal-close">
          <svg viewBox="0 0 24 24">
            <path d="M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z"
            />
            <path d="M0 0h24v24h-24z" fill="none" />
          </svg>
        </a>
        <h2>Create Database</h2>
      </header>
      <form #mydbform="ngForm">
        <div class="w3-container modal-content customScroll text-center">
          <mat-form-field class="example-full-width" style="margin-top:30px">
          <input matInput placeholder="Enter Database Name" [(ngModel)]="databaseName"required id="dbname" name="dbname" #dbname="ngModel">
          <div *ngIf="dbname.errors && (dbname.dirty || dbname.touched)" class="alert alert-danger">
              <div [hidden]="!dbname.errors.required">
                Datbase Name is required!
              </div>
            </div>
        </mat-form-field>
        <!-- <mat-form-field class="example-full-width">
          <input matInput placeholder="Enter Database URL" [(ngModel)]="databaseURL" required id="dburl" name="dburl" #dburl="ngModel">
          <div *ngIf="dburl.errors && (dburl.dirty || dburl.touched)" class="alert alert-danger">
              <div [hidden]="!dburl.errors.required">
                Datbase URL is required!
              </div>
            </div>
        </mat-form-field> -->
        <mat-form-field class="example-full-width">
          <input matInput placeholder="Enter Database IP" [(ngModel)]="databaseIP" required id="dburl" name="dburl" #dburl="ngModel">
          <div *ngIf="dburl.errors && (dburl.dirty || dburl.touched)" class="alert alert-danger">
              <div [hidden]="!dburl.errors.required">
                Datbase URL is required!
              </div>
            </div>
        </mat-form-field>
        <mat-form-field class="example-full-width">
          <input matInput placeholder="Enter Username" [(ngModel)]="username" required id="dbusername" name="dbusername" #dbusername="ngModel">
          <div *ngIf="dbusername.errors && (dbusername.dirty || dbusername.touched)" class="alert alert-danger">
              <div [hidden]="!dbusername.errors.required">
                Username is required!
              </div>
            </div>
        </mat-form-field>
        <mat-form-field class="example-full-width">
          <input type="password" matInput placeholder="Enter Database Password" [(ngModel)]="databasePassword" required id="dbpassword" name="dbpassword" #dbpassword="ngModel">
          <div *ngIf="dbpassword.errors && (dbpassword.dirty || dbpassword.touched)" class="alert alert-danger">
              <div [hidden]="!dbpassword.errors.required">
                Password is required!
              </div>
          </div>
        </mat-form-field>
        <mat-form-field class="example-full-width">
          <input matInput placeholder="Enter Database Port" [(ngModel)]="databasePort" required id="dbport" name="dbport" #dbport="ngModel">
          <div *ngIf="dbport.errors && (dbport.dirty || dbport.touched)" class="alert alert-danger">
              <div [hidden]="!dbport.errors.required">
                Datbase Port required!
              </div>
          </div>
        </mat-form-field>
        <!-- <mat-form-field class="example-full-width" style="margin-bottom:30px">
          <input matInput placeholder="Enter Database Driver" [(ngModel)]="databaseDriver" required id="dbdriver" name="dbdriver" #dbdriver="ngModel">
          <div *ngIf="dbdriver.errors && (dbdriver.dirty || dbdriver.touched)" class="alert alert-danger">
              <div [hidden]="!dbdriver.errors.required">
                Datbase Driver required!
              </div>
          </div>
        </mat-form-field> -->

        <mat-form-field class="example-full-width" style="margin-bottom:30px">
          <mat-select placeholder="Select Database Driver">
            <mat-option *ngFor="let driver of ['mysql','sqlserver'] " (click)="selectedDriver(driver)" [value]="driver">
              {{driver}}
            </mat-option>
          </mat-select>
        </mat-form-field>

      </div>
      <footer class="w3-container">
          <button mat-raised-button  class="btn mat-raised-button mat-primary mat-raised-cancel-button" color="primary" onclick="document.getElementById('createDatabaseTask').style.display='none'">
            Cancel
          </button>
          <button mat-raised-button  class="btn mat-raised-button mat-primary" [disabled]="mydbform.invalid" color="primary" onclick="document.getElementById('createDatabaseTask').style.display='none'" (click)="createDatabase()">
            Create
          </button>
        </footer>
      </form>
  </div>
</div>

<!-- FOR DATABASE UPDATION POP_UP -->
<div id="updateDatabaseTask" class="w3-modal modal-sm action-popup">
    <div class="w3-modal-content w3-animate-zoom" id="modalContainer">
      <header class="w3-container">
        <a onclick="document.getElementById('updateDatabaseTask').style.display='none'" class="modal-close">
          <svg viewBox="0 0 24 24">
            <path d="M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z"
            />
            <path d="M0 0h24v24h-24z" fill="none" />
          </svg>
        </a>
        <h2>Update Database</h2>
      </header>
      <div class="w3-container modal-content customScroll text-center">
          <mat-form-field class="example-full-width" style="margin-top:30px">
              <input matInput placeholder="Database Name" [(ngModel)]="databases.databaseName">
      </mat-form-field>
        <!-- <mat-form-field class="example-full-width">
          <input matInput placeholder="Database URL" [(ngModel)]="databases.databaseURL" >
        </mat-form-field> -->
        <mat-form-field class="example-full-width">
          <input matInput placeholder="Database URL" [(ngModel)]="updateIp" >
        </mat-form-field>
        <mat-form-field class="example-full-width">
          <input matInput placeholder="Username" [(ngModel)]="databases.username" >
          <!-- -->
        </mat-form-field>
        <mat-form-field class="example-full-width">
          <input type="password" matInput placeholder="Password" [(ngModel)]="databases.password" >
          <!-- -->
        </mat-form-field>
        <mat-form-field class="example-full-width">
          <input matInput placeholder="Database Port" [(ngModel)]="databases.databasePort" >
          <!-- -->
        </mat-form-field>
      <!-- <mat-form-field class="example-full-width" style="margin-bottom:30px">
          <input matInput placeholder="Database Driver" [(ngModel)]="databases.databaseDriver" >
      </mat-form-field> -->

    <mat-form-field class="example-full-width" style="margin-bottom:30px">
      <mat-select [(value)]="updateDriver"  placeholder="Select Database Driver">
        <mat-option (click)="selectedDriverforUpdate(driver)" *ngFor="let driver of ['mysql','sqlserver'] "  [value]="driver">
          {{driver}}
        </mat-option>
      </mat-select>
    </mat-form-field>

    </div>
    <footer class="w3-container">
        <button mat-raised-button  class="btn mat-raised-button mat-primary mat-raised-cancel-button" color="primary" onclick="document.getElementById('updateDatabaseTask').style.display='none'">
          Cancel
        </button>
        <button mat-raised-button  class="btn mat-raised-button mat-primary" color="primary" onclick="document.getElementById('updateDatabaseTask').style.display='none'" (click)="updateDatabase()">
          Update
        </button>
      </footer>
  </div>
</div>

<mat-card class="config-card" style="min-height: fit-content; padding-bottom: 5px;">
  <mat-card-header>
    <mat-card-title class="config-card-heading">  Environment Configuration </mat-card-title>
    <mat-card-actions class="actions" style="display: flex; flex-direction: row-reverse;">
      <button mat-button class="btn" (click)="startBackgroundThreads()" style="float: right; margin:5px; height: 35px;">Start</button>
      <ng-container *ngFor="let component of screenPermission">
        <mat-form-field id="portfolioDropdown" style="margin: 0 5px;"
        *ngIf="component.name === 'Select Portfolio'">
          <mat-select [(value)]="portfolio_name" placeholder="Select Portfolio">
            <mat-option *ngFor="let portfolio of portfolios" (click)="selectedPortfolioValue(portfolio)" [value]="portfolio.portfolio_name">
              {{ portfolio.portfolio_name }}
            </mat-option>
          </mat-select>
        </mat-form-field>

        <mat-form-field id="accountDropdown" style="margin: 0 5px;"
        *ngIf="component.name === 'Select Account'">
          <mat-select [(value)]="account_name" placeholder="Select Account">
            <mat-option *ngFor="let account of accounts" (click)="selectedAccountValue(account)" [value]="account.accountName">
              {{account.accountName}}
            </mat-option>
          </mat-select>
        </mat-form-field>

        <mat-form-field id="projectDropdown" style="margin: 0 5px;"
        *ngIf="component.name === 'Select Project'">
          <mat-select [(value)]="project_name" placeholder="Select Project">
            <mat-option *ngFor="let project of projects" (click)="selectedProjectValue(project)" [value]="project.project_name">
              {{project.project_name}}
            </mat-option>
          </mat-select>
        </mat-form-field>
      </ng-container>
    </mat-card-actions>
  </mat-card-header>
</mat-card>

<div class="containerPanel">
<!-- For Application -->
<mat-card class="config-card" style="min-height: fit-content;">
  <mat-card-header>
    <mat-card-title>Applications Details</mat-card-title>
    <mat-card-actions class="actions">
      <button mat-icon-button (click)="toggleTable('appContent')">
        <img src="../../assets/genral_icons/minus_sm.png" style="margin: 5px; vertical-align: sub;" />
      </button>
      <ng-container *ngFor="let component of screenPermission">
        <button mat-icon-button
        matTooltip="Create new Application"
        onclick="document.getElementById('createApplicationTask').style.display='block'"
        *ngIf="component.name === 'Create Application'"
        [ngStyle]="{'opacity':component.checked ? '0.5' : '1' }"
        [disabled]="component.checked"
        [disableRipple]="true">
          <img title="Create new Application" src="../../assets/genral_icons/plus.png" style="margin: 5px; vertical-align: sub;" />
        </button>
      </ng-container>

      <ng-container *ngFor="let component of screenPermission">
        <button mat-icon-button
        matTooltip="Edit existing Application"
        (click)='getParticularApplication()'
        *ngIf="component.name === 'Edit Application'"
        [ngStyle]="{'opacity':!isEditShow || component.checked ? '0.5' : '1' }"
        [disabled]="!isEditShow || component.checked"
        [disableRipple]="true"
        onclick="document.getElementById('updateApplicationTask').style.display='block'">
          <img title="Edit existing Application" src="../../assets/genral_icons/edit.png" style="margin: 5px; vertical-align: sub;"
          />
        </button>
      </ng-container>

      <ng-container *ngFor="let component of screenPermission">
        <button mat-icon-button
        matTooltip="Delete existing Application"
        (click)='deleteApplication()'
        *ngIf="component.name === 'Delete Application'"
        [ngStyle]="{'opacity':!isDeleteShow || component.checked ? '0.5' : '1' }"
        [disabled]="!isDeleteShow || component.checked"
        [disableRipple]="true">
          <img title="Delete existing Application" src="../../assets/genral_icons/bin_sm.png" style="margin: 5px; vertical-align: sub;"
          />
        </button>
      </ng-container>
    </mat-card-actions>
  </mat-card-header>

  <mat-card-content>
    <div class="table-responsive plato_table" id="appContent" style="display:block; margin-top: 10px !important;">
      <table class="table">
        <tr id="tableHead">
          <th style="text-align: center">
            <!-- <mat-checkbox [(ngModel)]="check1" (click)="isSelected()"></mat-checkbox> -->
          </th>
          <th> Application Name</th>
          <th> Application URL </th>
          <th> Pooling Interval </th>
        </tr>

        <tr *ngFor="let env of environment" id="rowNo">
          <td style="text-align: center">
            <mat-radio-button class="list-radio-button" [(value)]="env.applicationName" (click)='isChecked(env.applicationName,env.applicationId)'></mat-radio-button>
          </td>
          <td> {{env.applicationName}} </td>
          <td> {{ env.applicationURL}} </td>
          <td> {{ env.pullingInterval}} min(s) </td>
        </tr>
      </table>
    </div>
  </mat-card-content>
</mat-card>

<!-- For Servers -->
<mat-card class="config-card" style="min-height: fit-content;">
  <mat-card-header>
    <mat-card-title>Servers Details</mat-card-title>
    <mat-card-actions class="actions">
      <button mat-icon-button (click)="toggleTable('serverContent')">
        <img src="../../assets/genral_icons/minus_sm.png" style="margin: 5px; vertical-align: sub;" />
      </button>
      <ng-container *ngFor="let component of screenPermission">
        <button mat-icon-button
        matTooltip="Create New Server"
        *ngIf="component.name === 'Create Server'"
        [ngStyle]="{'opacity':component.checked ? '0.5' : '1' }"
        [disabled]="component.checked"
        [disableRipple]="true"
        onclick="document.getElementById('createServerTask').style.display='block'">
          <img title="Create new Server" src="../../assets/genral_icons/plus.png" style="cursor: pointer; margin: 5px; vertical-align: sub;" />
        </button>
      </ng-container>
      <ng-container *ngFor="let component of screenPermission">
        <button mat-icon-button
        matTooltip="Edit existing Server"
        (click)='getParticularServer()'
        *ngIf="component.name === 'Edit Server'"
        [ngStyle]="{'opacity':!isEditShowforServer || component.checked ? '0.5' : '1' }"
        [disabled]="!isEditShowforServer || component.checked"
        [disableRipple]="true"
        onclick="document.getElementById('updateServerTask').style.display='block'">
          <img title="Edit existing Server" src="../../assets/genral_icons/edit.png" style="cursor: pointer; margin: 5px; vertical-align: sub;" />
        </button>
      </ng-container>
      <ng-container *ngFor="let component of screenPermission">
        <button mat-icon-button matTooltip="Delete existing Server" (click)='deleteServer()'
        *ngIf="component.name === 'Delete Server'"
        [ngStyle]="{'opacity':!isDeleteShowforServer || component.checked ? '0.5' : '1' }"
        [disabled]="!isDeleteShowforServer || component.checked"
        [disableRipple]="true">
          <img title="Delete existing Server" src="../../assets/genral_icons/bin_sm.png" style="cursor: pointer; margin: 5px; vertical-align: sub;" />
        </button>
      </ng-container>
    </mat-card-actions>
  </mat-card-header>

  <mat-card-content>
    <div class="table-responsive plato_table" id="serverContent" style="display:block; margin-top: 10px !important;">  <!-- *ngIf="isSelected('Jira')" -->
      <table class="table">
        <tr id="tableHead">
          <th style="text-align: center">
            <!-- <mat-checkbox [(ngModel)]="check3" (click)="isSelectedForServer()"></mat-checkbox> -->
          </th>
          <th> Server Name</th>
          <th> Server URL </th>
          <th> Pooling Interval </th>
        </tr>

        <tr *ngFor="let ser of server" id="rowNo" >
          <td style="text-align: center">
              <mat-radio-button class="list-radio-button" [(value)]="ser.serverName" (click)='isCheckedForServer(ser.serverName,ser.serverId)'></mat-radio-button>
          </td>
          <td> {{ser.serverName}} </td>
          <td> {{ ser.serverURL}} </td>
          <td> {{ ser.pullingInterval}} min(s)</td>
        </tr>
      </table>
    </div>
  </mat-card-content>
</mat-card>

<!-- For Database -->
<mat-card class="config-card" style="min-height: fit-content;">
  <mat-card-header>
    <mat-card-title>Database Details</mat-card-title>
    <mat-card-actions class="actions">
      <button mat-icon-button (click)="toggleTable('databaseContent')">
        <img src="../../assets/genral_icons/minus_sm.png" style="margin: 5px; vertical-align: sub;" />
      </button>
      <ng-container *ngFor="let component of screenPermission">
        <button mat-icon-button
        matTooltip="Create new Database"
        *ngIf="component.name === 'Create Database'"
        [ngStyle]="{'opacity':component.checked ? '0.5' : '1' }"
        [disabled]="component.checked"
        [disableRipple]="true"
        onclick="document.getElementById('createDatabaseTask').style.display='block'">
          <img title="Create new Database" src="../../assets/genral_icons/plus.png" style="cursor: pointer; margin: 5px; vertical-align: sub;" />
        </button>
      </ng-container>
      <ng-container *ngFor="let component of screenPermission">
        <button mat-icon-button matTooltip="Edit existing Database" (click)='getParticularDatabase()'
        *ngIf="component.name === 'Edit Database'"
        [ngStyle]="{'opacity':!isEditShowforDatabase || component.checked ? '0.5' : '1' }"
        [disabled]="!isEditShowforDatabase || component.checked"
        [disableRipple]="true"
        onclick="document.getElementById('updateDatabaseTask').style.display='block'">
          <img title="Edit existing Database" src="../../assets/genral_icons/edit.png" style="cursor: pointer; margin: 5px; vertical-align: sub;" />
        </button>
      </ng-container>
      <ng-container *ngFor="let component of screenPermission">
        <button mat-icon-button matTooltip="Delete existing Database" (click)='deleteDatabase()'
        *ngIf="component.name === 'Delete Database'"
        [ngStyle]="{'opacity':!isDeleteShowforDatabase || component.checked ? '0.5' : '1' }"
        [disabled]="!isDeleteShowforDatabase || component.checked"
        [disableRipple]="true">
          <img title="Delete existing Database" src="../../assets/genral_icons/bin_sm.png" style="cursor: pointer; margin: 5px; vertical-align: sub;" />
        </button>
      </ng-container>
    </mat-card-actions>
  </mat-card-header>

  <mat-card-content>
    <div class="table-responsive plato_table" id="databaseContent" style="display:block; margin-top: 10px !important;">
      <table class="table">
        <tr id="tableHead">
          <th style="text-align: center">
            <!-- <mat-checkbox [(ngModel)]="check5" (click)="isSelectedForDatabase()"></mat-checkbox> -->
          </th>
          <th> Database Name</th>
          <th> URL </th>
          <th> User name </th>
          <th> DB driver </th>
        </tr>

        <tr *ngFor="let db of database" id="rowNo" >
          <td style="text-align: center">
              <mat-radio-button class="list-radio-button" [(value)]="db.databaseName" (click)='isCheckedForDatabase(db.databaseName,db.databaseId)'></mat-radio-button>
            <!-- <mat-checkbox [ngModel]="check6" (click) = 'isCheckedForDatabase(db.databaseName,db.databaseId)'></mat-checkbox> -->
          </td>
          <td> {{db.databaseName}} </td>
          <td> {{ db.databaseURL}} </td>
          <td> {{ db.username}}</td>
          <td> {{ db.databaseDriver}}</td>
        </tr>
      </table>
    </div>
  </mat-card-content>
</mat-card>
</div>

